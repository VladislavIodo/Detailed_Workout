{"version":3,"sources":["components/OnOff/OnOff.tsx","components/Rating/Rating.tsx","components/Accordion/Accordion.tsx","components/UncontrolledOnOff/UncontrolledOnOff.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["OnOff","props","onStyle","height","width","border","display","padding","backgroundColor","on","offStyle","indicatorStyle","borderRadius","marginLeft","style","onClick","onChange","Rating","Star","selected","value","Accordion","AccordionTitle","title","titleValue","collapsed","AccordionBody","UncontrolledOnOff","useState","defaultOn","setOn","App","ratingValue","setRatingValue","accordionCollapsed","setAccordionCollapsed","switchOn","setSwitchOn","className","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d4f4586.chunk.js","sourcesContent":[" import React, {useState} from \"react\";\r\n\r\ntype OnOffPropsType = {\r\n    on: boolean\r\n    onChange: (on: boolean) => void\r\n}\r\n\r\nexport function OnOff(props: OnOffPropsType) {\r\n\r\n    const onStyle = {\r\n        height: \"20px\",\r\n        width: \"30px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        padding: \"2px\",\r\n        backgroundColor: props.on? \"green\" : \"white\"\r\n    }\r\n    const offStyle = {\r\n        height: \"20px\",\r\n        width: \"30px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        padding: \"2px\",\r\n        backgroundColor: props.on ? \"white\" : \"red\"\r\n    }\r\n    const indicatorStyle = {\r\n        height: \"10px\",\r\n        width: \"10px\",\r\n        borderRadius: \"5px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        marginLeft: \"5px\",\r\n        backgroundColor: props.on ? \"green\" : \"red\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button style={onStyle} onClick={()=>{props.onChange(true)}}>on</button>\r\n            <button style={offStyle} onClick={()=>{props.onChange(false)}}>off</button>\r\n            <div style={indicatorStyle}></div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\n\r\nexport type RatingValueType = 0 | 1 | 2 | 3 | 4 | 5;\r\n\r\ntype RatingPropsType = {\r\nvalue: RatingValueType\r\n    onClick: (value: RatingValueType) => void\r\n}\r\n\r\nexport function Rating(props: RatingPropsType) {\r\n    return (\r\n        <div>\r\n            <Star selected={props.value > 0} onClick={props.onClick} value={1} />\r\n            <Star selected={props.value > 1} onClick={props.onClick} value={2} />\r\n            <Star selected={props.value > 2} onClick={props.onClick} value={3} />\r\n            <Star selected={props.value > 3} onClick={props.onClick} value={4} />\r\n            <Star selected={props.value > 4} onClick={props.onClick} value={5} />\r\n        </div>\r\n    )\r\n}\r\n\r\ntype StarPropsType = {\r\n    selected: boolean\r\n    value: RatingValueType\r\n    onClick: (value: RatingValueType) => void\r\n}\r\n\r\nfunction Star(props: StarPropsType) {\r\n        // return props.selected ? <span><b>Star</b></span> : <span>Star</span>\r\n        return <span onClick={ () => {props.onClick(props.value)}}>\r\n            { props.selected ? <b>Star </b> : \"Star \"}\r\n        </span>\r\n}","import React, {useState} from \"react\";\r\n\r\n\r\ntype AccordionPropsType = {\r\n    titleValue: string\r\n    collapsed: boolean\r\n    onChange: () => void\r\n}\r\n\r\nexport function Accordion(props: AccordionPropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <AccordionTitle title={props.titleValue}\r\n            onChange={props.onChange}/>\r\n            {!props.collapsed && <AccordionBody/>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AccordionTitlePropsType = {\r\n    title: string\r\n    onChange: () => void\r\n}\r\n\r\nfunction AccordionTitle(props: AccordionTitlePropsType) {\r\n    return (\r\n        <h3 onClick={props.onChange}>--{props.title}--</h3>\r\n    )\r\n}\r\n\r\n\r\nfunction AccordionBody() {\r\n    return (\r\n        <ul>\r\n            <li>1</li>\r\n            <li>2</li>\r\n            <li>3</li>\r\n        </ul>\r\n    )\r\n}"," import React, {useState} from \"react\";\r\n\r\ntype OnOffPropsType = {\r\n    onChange: (on: boolean) => void\r\n    defaultOn: boolean\r\n}\r\n\r\nexport function UncontrolledOnOff(props: OnOffPropsType) {\r\n\r\nlet [on, setOn] = useState(props.defaultOn ? props.defaultOn : false)\r\n    const onStyle = {\r\n        height: \"20px\",\r\n        width: \"30px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        padding: \"2px\",\r\n        backgroundColor: on? \"green\" : \"white\"\r\n    }\r\n    const offStyle = {\r\n        height: \"20px\",\r\n        width: \"30px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        padding: \"2px\",\r\n        backgroundColor: on ? \"white\" : \"red\"\r\n    }\r\n    const indicatorStyle = {\r\n        height: \"10px\",\r\n        width: \"10px\",\r\n        borderRadius: \"5px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        marginLeft: \"5px\",\r\n        backgroundColor: on ? \"green\" : \"red\"\r\n    }\r\n    const onClicked = () => {\r\n        setOn(true)\r\n        props.onChange(true)\r\n    }\r\n    const offClicked = () => {\r\n        setOn(false)\r\n        props.onChange(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button style={onStyle} onClick={onClicked}>on</button>\r\n            <button style={offStyle} onClick={offClicked}>off</button>\r\n            <div style={indicatorStyle}></div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {OnOff} from \"./components/OnOff/OnOff\";\r\nimport {Rating, RatingValueType} from \"./components/Rating/Rating\";\r\nimport {UncontrolledRating} from \"./components/UncontrolledRating/UncontrolledRating\";\r\nimport {Accordion} from \"./components/Accordion/Accordion\";\r\nimport {UncontrolledOnOff} from \"./components/UncontrolledOnOff/UncontrolledOnOff\";\r\n\r\nfunction App(props: any) {\r\n\r\n    let [ratingValue, setRatingValue] = useState<RatingValueType>(0);\r\n    let [accordionCollapsed, setAccordionCollapsed] = useState<boolean>(true);\r\n    let [switchOn, setSwitchOn] = useState<boolean>(true);\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <UncontrolledOnOff onChange={setSwitchOn} defaultOn={false}/> {switchOn.toString()}\r\n            <OnOff on={switchOn} onChange={setSwitchOn}/>\r\n            <Rating value={ratingValue} onClick={setRatingValue} />\r\n            <Accordion titleValue={\"Menu\"}\r\n                       collapsed={accordionCollapsed}\r\n                       onChange={() => {setAccordionCollapsed(!accordionCollapsed)}}/>\r\n            {/*<UncontrolledRating onChange={switchOn}/>*/}\r\n            {/*<UncontrolledRating value={1}/>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\ntype PageTitlePropsType = {\r\n    title: string\r\n}\r\n\r\nfunction PageTitle(props: PageTitlePropsType) {\r\n    return <h1>{props.title}</h1>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}